plugins {
    id 'com.github.johnrengelman.shadow'
    id 'java'
    id 'scala'
    id 'application'
}

repositories {
//        WARNING: Order is important! Top is searched first!
//        Use The 3 lines below if you compiled arrow dependencies somewhere else, and want to compile against those now.
//        Of course, you will have to provide an *absolute path* to where you have stored these jars on your filesystem.
        flatDir {
            dirs '/tmp/arrow/java/dataset/target'
        }
        mavenLocal()
        mavenCentral()
}

configurations {
    shipLight
    shipFull.extendsFrom(shipLight)

    implementation.extendsFrom(shipFull)
}

dependencies {
//  Use Scala 2.12 in our library project
    shipFull 'org.scala-lang:scala-library:2.12.10'
    shipFull 'org.scala-lang:scala-reflect:2.12.10'

//  Repository libs for modified v5.0.0 bridge Arrow Dataset JNI
//    shipEssential ('org.apache.arrow:arrow-dataset:5.0.0-SNAPSHOT') {
//        transitive = false
//    }
    shipLight ('org.apache.arrow:arrow-memory-core:5.0.0-SNAPSHOT')
    shipLight ('org.apache.arrow:arrow-memory-netty:5.0.0-SNAPSHOT')
    shipLight ('org.apache.arrow:arrow-vector:5.0.0-SNAPSHOT')
//    Compiled libs in local repository.
    shipLight name: 'arrow-dataset-5.0.0-SNAPSHOT'
}

application {
    // Define the main class for the application.
    mainClass = 'simple_compile.App'
}


//////////// Jarfile Generation Section ////////////
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/** Builds a full jar JAR, with all dependencies contained */
shadowJar {
    mainClassName='simple_compile.App'
    zip64(true)
    mergeServiceFiles()
    

    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'simple_compile.App'
        )
    }
}

/** Builds a lightweight type JAR. You are responsible to provide all dependencies listed in the manifest `Class-Path` entry */
task lightJar(type: ShadowJar) {
    mainClassName='simple_compile.App'
    zip64(true)
    mergeServiceFiles()

    dependencies {
        exclude(dependency('org.scala-lang:scala-library:2.12.10'))
        exclude(dependency('org.scala-lang:scala-reflect:2.12.10'))
    }

    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'simple_compile.App',
                'Class-Path': 'scala-library-2.12.10.jar' //scala-reflect-2.12.10.jar scala-xml_2.12-1.2.0.jar'
        )
    }
    archiveClassifier.set('light')
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [ project.configurations.shipLight ]
    manifest.inheritFrom project.tasks.jar.manifest
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

jar {
    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'simple_compile.App'
        )
    }
}


application {
    // Define the main class for the application.
    mainClass = 'simple_compile.App'
}


// Some Java sources depend on Scala sources. Java sources are compiled first, so it cannot find compiled Scala classes and that produces errors.
// Using below 4 lines, we set Java files to compile in the Scala-task.
sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []